#!/usr/bin/python3
import argparse
from argparse import RawTextHelpFormatter
import sys
import getpass
import ssl
import http.client
import json


class Client:

    SSL_DIR = 'ssl/'
    HOST_ADDR = '127.0.0.1'

    server_cert = SSL_DIR + 'server.crt'
    client_cert = SSL_DIR + 'client.crt'
    client_key = SSL_DIR + 'client.key'

    username = ''

    def create_http_tls_connection(self, method, endpoint, json_data):
        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=self.server_cert)
        ssl.match_hostname = lambda cert, hostname: True

        headers = {'Content-type': 'application/json'}

        conn = http.client.HTTPSConnection(self.HOST_ADDR, context=context)
        conn.request(method, endpoint, json_data, headers)

        response = conn.getresponse()
        print("Server https response: {}".format(response.read().decode()))

    def create_http_connection(self, method, endpoint, json_data):
        headers = {'Content-type': 'application/json'}

        conn = http.client.HTTPConnection(self.HOST_ADDR)
        conn.request(method, endpoint, json_data, headers)

        response = conn.getresponse()
        print("Server http response: {}".format(response.read().decode()))

    # /register
    def register(self):
        print('New Client register')

        self.username = input('username: ')
        passwd = getpass.getpass('password: ')
        passwd_rep = getpass.getpass('repeat password: ')

        if passwd.__eq__(passwd_rep):
            foo = {'username': self.username, "passwd": passwd}
            json_data = json.dumps(foo)
            self.create_http_tls_connection('POST', '/register', json_data)
        else:
            error('passwords do not match')

    # /keygen
    def keygen(self, username):
        print("keygen")

        foo = {'username': self.username}
        json_data = json.dumps(foo)
        self.create_http_tls_connection('POST', '/keygen', json_data)

    # /login
    def login(self):
        print("Client login")

        self.username = input('username: ')
        passwd = getpass.getpass('password: ')

        self.keygen(self.username)

        foo = {'username': self.username, "passwd": passwd}
        json_data = json.dumps(foo)

        self.create_http_connection('POST', '/login', json_data)

    # /submit
    def submit(self, vuln_description, fingerprint):
        self.login()
        print("submit")

        foo = {'vuln_description': vuln_description, 'fingerprint': fingerprint}
        json_data = json.dumps(foo)

        self.create_http_connection('POST', '/submit', json_data)

    # /show
    def show(self):
        self.login()
        print("show")

    # /score
    def score(self):
        self.login()
        print("score")

    # /admin/remove_user
    def remove_user(self):
        self.login()
        print("admin : remove_user")

    # /admin/remove_submission
    def remove_submission(self):
        self.login()
        print("admin : remove_submission")


def error(message):
    print("error: {}".format(message))
    sys.exit(1)


def main():

    client = Client()

    description = 'Welcome to the Vulnerability Submission Platform\n\
    register   Register new client account\n\
    submit     Submit vulnerability\n\
    show       Show submissions\n\
    score      Show scores\n'

    usage = '\n\
    client <command> [<args>]\n\
    client register\n\
    client submit <vuln_description> <fingerprint>\n\
    client show\n\
    client score\n'

    parser = argparse.ArgumentParser(prog='client', description=description,
                                     usage=usage, formatter_class=RawTextHelpFormatter)
    parser.add_argument('command', type=str, choices=['register', 'submit', 'show', 'score'])
    parser.add_argument('vuln_description', nargs='?')
    parser.add_argument('fingerprint', nargs='?')

    args = parser.parse_args()

    print(args.vuln_description)

    if args.command.__eq__('register'):
        client.register()
    elif args.command.__eq__('submit'):
        if args.vuln_description and args.fingerprint:
            client.submit(args.vuln_description, args.fingerprint)
        else:
            parser.error('wrong arguments for submit command')
    elif args.command.__eq__('show'):
        client.show()
    elif args.command.__eq__('score'):
        client.score()


if __name__ == "__main__":
    main()