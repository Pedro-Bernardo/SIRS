#!/usr/bin/python3
import argparse
from argparse import RawTextHelpFormatter
import getpass
import ssl
import http.client
import json


class Client:

    SSL_DIR = 'ssl/'
    HOST_ADDR = '127.0.0.1'
    HOST_NAME = 'SIRS' # name from server certificate
    HOST_PORT = 443

    server_cert = SSL_DIR + 'server.crt'
    client_cert = SSL_DIR + 'client.crt'
    client_key = SSL_DIR + 'client.key'

    username = ''

    #def __init__(self):
        #self.register()

    # /register
    def register(self):
        print('New Client register')
        input('username: ')
        self.username = getpass.getuser()
        passwd = getpass.getpass('password: ')
        passwd_rep = getpass.getpass('repeat password: ')

        if passwd.__eq__(passwd_rep):
            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=self.server_cert)
            # context.load_cert_chain(certfile=self.client_cert, keyfile=self.client_key)
            ssl.match_hostname = lambda cert, hostname: True # is this right? should not verify hostname?
            #ssl.CertificateError: hostname '127.0.0.1' doesn't match 'SIRS'
            #conn = http.client.HTTPSConnection(self.HOST_ADDR, context=context, check_hostname=self.HOST_NAME)
            conn = http.client.HTTPSConnection(self.HOST_ADDR, context=context)

            headers = {'Content-type': 'application/json'}

            foo = {'username': self.username}
            json_data = json.dumps(foo)

            conn.request('POST', '/login', json_data, headers)

            response = conn.getresponse()
            print("Server response: {}".format(response.read().decode()))

        else:
            print('Error: passwords do not match')

    # /login
    def login(self):
        print("Client login")

        """context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=server_cert)
        context.load_cert_chain(certfile=client_cert, keyfile=client_key)

        conn = http.client.HTTPSConnection(HOST_ADDR, context=context, check_hostname=HOST_NAME)

        headers = {'Content-type': 'application/json'}

        foo = {'text': 'Hello HTTP #1 **cool**, and #1!'}
        json_data = json.dumps(foo)

        conn.request('POST', '/login', json_data, headers)

        response = conn.getresponse()
        print(response.read().decode())"""

    # /submit
    def submit(self):
        print("submit")

    # /show
    def show(self):
        print("show")

    # /score
    def score(self):
        print("score")

def main():

    client = Client()

    description = 'Welcome to the Vulnerability Submission Platform\n\
    register   Register new client account\n\
    submit     Submit vulnerability\n\
    show       Show submissions\n\
    score      Show scores\n'
    parser = argparse.ArgumentParser(prog='client', description=description,
                                     usage='client <command> [<args>]', formatter_class=RawTextHelpFormatter)
    parser.add_argument('command')

    args = parser.parse_args()

    if args.command.__eq__('register'):
        client.register()
    elif args.command.__eq__('submit'):
        client.submit()
    elif args.command.__eq__('show'):
        client.show()
    elif args.command.__eq__('score'):
        client.score()


if __name__ == "__main__":
    main()